import querystring;

backend F_origin_s3_bundle {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "443";
    .host = "{{AWS_BUNDLE_BUCKET}}.s3.amazonaws.com";
	.host_header = "{{AWS_BUNDLE_BUCKET}}.s3.amazonaws.com";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .ssl = true;
    .ssl_cert_hostname = "*.s3.amazonaws.com";
    .ssl_check_cert = always;
    .probe = {
        .request = "GET / HTTP/1.1"  "Host: {{AWS_BUNDLE_BUCKET}}.s3.amazonaws.com" "User-Agent: Varnish/fastly (healthcheck)" "Connection: close";
        .window = 5;
        .threshold = 1;
        .timeout = 2s;
        .initial = 5;
        .dummy = true;
      }
}

backend F_origin_s3_website {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "443";
    .host = "{{AWS_WEBSITE_BUCKET}}.s3-eu-west-1.amazonaws.com";
	.host_header = "{{AWS_WEBSITE_BUCKET}}.s3-eu-west-1.amazonaws.com";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .ssl = true;
    .ssl_cert_hostname = "*.s3.amazonaws.com";
    .ssl_check_cert = always;
    .probe = {
        .request = "GET / HTTP/1.1"  "Host: {{AWS_WEBSITE_BUCKET}}.s3-eu-west-1.amazonaws.com" "User-Agent: Varnish/fastly (healthcheck)" "Connection: close";
        .window = 5;
        .threshold = 1;
        .timeout = 2s;
        .initial = 5;
        .dummy = true;
      }
}

{{#backends}}
backend F_{{region}}_lambda {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "443";
    .host = "{{address}}";
    .host_header = "{{address}}";
    .first_byte_timeout = 60s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .ssl = true;
    .ssl_sni_hostname = "{{ssl_sni_hostname}}";
    .ssl_cert_hostname = "{{ssl_cert_hostname}}";
    .ssl_check_cert = always;
    .probe = {
		{{#prepended_path}}
		.request = "GET /{{prepended_path}}/v3/__gtg HTTP/1.1"  "Host: {{address}}" "User-Agent: Varnish/fastly (healthcheck)" "Connection: close";
		{{/prepended_path}}
		{{^prepended_path}}
		.request = "GET /v3/__gtg HTTP/1.1"  "Host: {{address}}" "User-Agent: Varnish/fastly (healthcheck)" "Connection: close";
		{{/prepended_path}}
        .window = 5;
        .threshold = 2;
        .timeout = 5s;
        .initial = 2;
        .expected_response = 200;
        .interval = 10s;
      }
}
{{/backends}}

sub set_backend {
	{{> backend}}
}

sub set_backend_host {
	if (req.backend == F_origin_s3_bundle) {
		set req.http.host = "{{AWS_BUNDLE_BUCKET}}.s3.amazonaws.com";
	}
	if (req.backend == F_origin_s3_website) {
		set req.http.host = "{{AWS_WEBSITE_BUCKET}}.s3-eu-west-1.amazonaws.com";
	}
	{{#backends}}
	if (req.backend == F_{{region}}_lambda) {
		set req.http.Host = "{{address}}";
	}
	{{/backends}}
}

sub prepend_path_with_lambda_stage {
	{{#prepended_path}}
	set bereq.url = "/" "{{prepended_path}}" bereq.url;
	{{/prepended_path}}
}

sub generate_aws_authorization_header {
	declare local var.awsAccessKey STRING;
	declare local var.awsSecretKey STRING;
	declare local var.awsS3Bucket STRING;
	declare local var.awsRegion STRING;
	declare local var.canonicalHeaders STRING;
	declare local var.signedHeaders STRING;
	declare local var.canonicalRequest STRING;
	declare local var.canonicalQuery STRING;
	declare local var.stringToSign STRING;
	declare local var.dateStamp STRING;
	declare local var.signature STRING;
	declare local var.scope STRING;

	set var.awsAccessKey = "{{{AWS_ACCESS_KEY_ID}}}";
	set var.awsSecretKey = "{{{AWS_SECRET_ACCESS_KEY}}}";
	if (req.backend == F_origin_s3_bundle) {
		set var.awsS3Bucket = "{{{AWS_BUNDLE_BUCKET}}}";
	}
	if (req.backend == F_origin_s3_website) {
		set var.awsS3Bucket = "{{{AWS_WEBSITE_BUCKET}}}";
	}
	// TODO: This should be configured via the region that is deployed to when serverless is deployed with the additional stack
	set var.awsRegion = "eu-west-1";

	if (req.request == "GET") {
		set bereq.http.x-amz-content-sha256 = digest.hash_sha256("");
		set bereq.http.x-amz-date = strftime({"%Y%m%dT%H%M%SZ"}, now);
		set bereq.http.host = var.awsS3Bucket ".s3." var.awsRegion ".amazonaws.com";
		set bereq.url = querystring.remove(bereq.url);
		set var.dateStamp = strftime({"%Y%m%d"}, now);
		set var.canonicalHeaders = ""
			"host:" bereq.http.host LF
			"x-amz-content-sha256:" bereq.http.x-amz-content-sha256 LF
			"x-amz-date:" bereq.http.x-amz-date LF
		;
		set var.canonicalQuery = "";
		set var.signedHeaders = "host;x-amz-content-sha256;x-amz-date";
		set var.canonicalRequest = ""
			"GET" LF
			bereq.url.path LF
			var.canonicalQuery LF
			var.canonicalHeaders LF
			var.signedHeaders LF
			digest.hash_sha256("")
		;

		set var.scope = var.dateStamp "/" var.awsRegion "/s3/aws4_request";

		set var.stringToSign = ""
			"AWS4-HMAC-SHA256" LF
			bereq.http.x-amz-date LF
			var.scope LF
			regsub(digest.hash_sha256(var.canonicalRequest),"^0x", "")
		;

		set var.signature = digest.awsv4_hmac(
			var.awsSecretKey,
			var.dateStamp,
			var.awsRegion,
			"s3",
			var.stringToSign
		);

		set bereq.http.Authorization = "AWS4-HMAC-SHA256 "
			"Credential=" var.awsAccessKey "/" var.scope ", "
			"SignedHeaders=" var.signedHeaders ", "
			"Signature=" + regsub(var.signature,"^0x", "")
		;
	}
}

sub sort_comma_separated_querystring_parameter {
	#  Store the url without the querystring into a temporary header.
	declare local var.url STRING;
	set var.url = querystring.remove("https://www.example.com");
	declare local var.parameter STRING;
	set var.parameter = req.http.Sort-Parameter;
	# If query parameter does not exist or is empty, set it to ""
	set var.parameter = if(var.parameter != "", var.parameter, "");
	# Replace all `&` characters with `^`, this is because `&` would break the parameter up into pieces.
	set var.parameter = regsuball(var.parameter, "&", "^");
	# Replace all `,` characters with `&` to break them into individual query parameters
	# Append `1-` infront of all the query parameters to make them simpler to transform later
	set var.parameter = "1-" regsuball(var.parameter, ",", "&1-");
	set var.url = var.url "?" var.parameter;
	set var.url = querystring.sort(var.url);
	# Grab all the query parameters from the sorted url
	set var.parameter = regsub(var.url, "(.*)\?(.*)", "\2");
	# Reverse all the previous transformations to get back the single `features` query parameter value
	set var.parameter = regsuball(var.parameter, "1-", "");
	set var.parameter = regsuball(var.parameter, "&", ",");
	set var.parameter = regsuball(var.parameter, "\^", "&");
	set req.http.Sorted-Parameter = var.parameter;
}

sub normalise_querystring_parameters_for_polyfill_bundle {
	# Store the url without the querystring into a temporary header.
	declare local var.url STRING;
	set var.url = querystring.remove(req.url);
	declare local var.querystring STRING;
	set var.querystring = "?";
	declare local var.features STRING;
	set var.features = urldecode(subfield(req.url.qs, "features", "&"));
	set var.features = if(var.features != "", var.features, "default");
	if (std.strlen(var.features) < 200) {
		set req.http.Sort-Parameter = var.features;
		call sort_comma_separated_querystring_parameter;
		set var.querystring = var.querystring "&features=" req.http.Sorted-Parameter;
	} else {
		set var.querystring = var.querystring "&features=" var.features;
	}
	declare local var.excludes STRING;
	set var.excludes = urldecode(subfield(req.url.qs, "excludes", "&"));
	if (std.strlen(var.excludes) < 200) {
		set req.http.Sort-Parameter = var.excludes;
		call sort_comma_separated_querystring_parameter;
		set var.querystring = var.querystring "&excludes=" req.http.Sorted-Parameter;
	} else {
		set var.querystring = var.querystring "&excludes=" var.excludes;
	}
	declare local var.rum STRING;
	set var.rum = urlencode(urldecode(subfield(req.url.qs, "rum", "&")));
	set var.querystring = var.querystring "&rum=" if(var.rum != "", var.rum, "0");
	declare local var.unknown STRING;
	set var.unknown = urlencode(urldecode(subfield(req.url.qs, "unknown", "&")));
	set var.querystring = var.querystring "&unknown=" if(var.unknown != "", var.unknown, "polyfill");
	declare local var.flags STRING;
	set var.flags = urlencode(urldecode(subfield(req.url.qs, "flags", "&")));
	set var.querystring = var.querystring "&flags=" if(var.flags != "", var.flags, "");
	declare local var.version STRING;
	set var.version = urlencode(urldecode(subfield(req.url.qs, "version", "&")));
	set var.querystring = var.querystring "&version=" if(var.version != "", var.version, "{{polyfill_library_latest_version}}");
	declare local var.ua STRING;
	set var.ua = urlencode(urldecode(subfield(req.url.qs, "ua", "&")));
	if (var.ua != "") {
		set var.querystring = var.querystring "&ua=" var.ua;
	} else {
		switch (var.version) {
			case "3.1.0": fallthrough;
			case "3.1.2": fallthrough;
			case "3.2.0": fallthrough;
			case "3.3.0": fallthrough;
			case "3.4.0": fallthrough;
			case "3.4.1": fallthrough;
			case "3.4.2": fallthrough;
			case "3.5.0": fallthrough;
			case "3.6.0": fallthrough;
			case "3.6.1": fallthrough;
			case "3.7.0": fallthrough;
			case "3.8.0": fallthrough;
			case "3.8.1": fallthrough;
			case "3.9.0": fallthrough;
			case "3.9.1": fallthrough;
			case "3.9.2": fallthrough;
			case "3.10.0": fallthrough;
			case "3.11.0": fallthrough;
			case "3.12.0": fallthrough;
			case "3.12.1": fallthrough;
			case "3.13.0": fallthrough;
			case "3.14.0": fallthrough;
			case "3.15.0": fallthrough;
			case "3.16.0": fallthrough;
			case "3.17.0": fallthrough;
			case "3.18.0": fallthrough;
			case "3.18.1": fallthrough;
			case "3.18.2": fallthrough;
			case "3.19.0": fallthrough;
			case "3.20.0": fallthrough;
			case "3.20.1": fallthrough;
			case "3.20.2": fallthrough;
			case "3.21.0": fallthrough;
			case "3.21.1": fallthrough;
			case "3.21.2": fallthrough;
			case "3.21.3": fallthrough;
			case "3.21.4": fallthrough;
			case "3.22.0": fallthrough;
			case "3.23.0": fallthrough;
			case "3.24.0": fallthrough;
			case "3.25.1": call normalise_user_agent; break;
			default: call normalise_user_agent_latest; break;
		}
		set var.querystring = var.querystring "&ua=" req.http.Normalized-User-Agent;
	}
	declare local var.callback STRING;
	set var.callback = urlencode(urldecode(subfield(req.url.qs, "callback", "&")));
	if (var.callback != "" && var.callback ~ "^[\w\.]+$") {
		set var.querystring = var.querystring "&callback=" var.callback;
	} else {
		set var.querystring = var.querystring "&callback=";
	}
	declare local var.compression STRING;
	set var.compression = urlencode(urldecode(subfield(req.url.qs, "compression", "&")));
	if (var.compression == "") {
		if (req.http.Fastly-Orig-Accept-Encoding && req.http.User-Agent !~ "MSIE 6") {
			if (req.http.Fastly-Orig-Accept-Encoding ~ "br") {
				set var.compression = "br";
			} elsif (req.http.Fastly-Orig-Accept-Encoding ~ "gzip") {
				set var.compression = "gzip";
			}
		}
	}
	set var.querystring = var.querystring "&compression=" var.compression;
	set req.url = var.url var.querystring;
}

include "useragent-parser.vcl";
include "normalise-user-agent.vcl";
include "normalise-user-agent-latest.vcl";

# The Fastly VCL boilerplate.
include "fastly-boilerplate-begin.vcl";

include "breadcrumbs.vcl";
include "redirects.vcl";
include "synthetic-responses.vcl";
include "polyfill-service-v2.vcl";
include "polyfill-service-v3.vcl";

# Finally include the last bit of VCL, this _must_ be last!
include "fastly-boilerplate-end.vcl";
