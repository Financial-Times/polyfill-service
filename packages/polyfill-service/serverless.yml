
service: origami-polyfill-service

frameworkVersion: ">=1.29.2"

provider:
  name: aws
  cfLogs: true
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: ${opt:region, 'eu-west-1'}
  stackName: ${opt:stackname, self:custom.defaultStackName} # Use a custom name for the CloudFormation stack
  apiName: ${opt:apiname, self:custom.defaultApiName} # Use a custom name for the API Gateway API
  # profile: production # The default profile to use with this service
  memorySize: 1024 # Overwrite the default memory size. Default is 1024
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup
  deploymentBucket:
    name: ${self:service}-artefacts-${self:provider.region} # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
  role: arn:aws:iam::${env:AWS_ACCOUNT_ID, self:custom.secret.AWS_ACCOUNT_ID}:role/ApplicationRoleFor_${self:service} # Overwrite the default IAM role which is used for all functions
  versionFunctions: false # Optional function versioning
  stackTags: ${file(./serverless/tags.js)} # Optional CF stack tags
  tags: ${file(./serverless/tags.js)} # Optional service wide function tags
  environment: # Service wide environment variables which are available to all functions
    AWS_BUNDLE_BUCKET: ${self:custom.additionalStacks.permanent.Resources.S3BundlesBucket.Properties.BucketName}
    AWS_WEBSITE_BUCKET: ${self:custom.additionalStacks.permanent.Resources.WebsiteBucket.Properties.BucketName}
    NODE_ENV: ${env:NODE_ENV, self:custom.secret.NODE_ENV}
    AWS_ACCESS_ID: ${env:AWS_ACCESS_ID, self:custom.secret.AWS_ACCESS_ID}
    AWS_SECRET_ACCESS: ${env:AWS_SECRET_ACCESS, self:custom.secret.AWS_SECRET_ACCESS}

plugins:
  - serverless-offline
  - serverless-sentry
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - serverless-stack-output
  - serverless-pseudo-parameters # TODO: This might not be needed, look into removing it
  - serverless-plugin-additional-stacks
  - serverless-create-deployment-bucket-plugin
  - serverless-s3-remover
  - serverless-s3-sync

custom:
  remover:
    buckets:
      - ${self:provider.environment.AWS_BUNDLE_BUCKET}
      - ${self:provider.environment.AWS_WEBSITE_BUCKET}
  defaultApiName: ${self:provider.stage}-${self:provider.region}-${self:service}
  defaultStackName: ${self:service}-${self:provider.stage}-${self:provider.region}
  additionalStacks:
    permanent:
      StackName: ${self:provider.stackName}-permanent
      Resources:
        S3BundlesBucketPolicy:
          Type: 'AWS::S3::BucketPolicy'
          Properties:
            Bucket:
              Ref: "S3BundlesBucket"
            PolicyDocument:
              Id: S3BundlesBucketPolicy
              Statement:
                - Sid: AllowOnlyApplicationToPutObject
                  Effect: Allow
                  Principal:
                    AWS:
                    - ${self:provider.role}
                  Action: s3:PutObject
                  Resource:
                  - arn:aws:s3:::${self:custom.additionalStacks.permanent.Resources.S3BundlesBucket.Properties.BucketName}/*
                - Sid: AllowOnlyApplicationToGetObject
                  Effect: Allow
                  Principal:
                    AWS:
                    - ${self:provider.role}
                  Action: s3:GetObject
                  Resource:
                  - arn:aws:s3:::${self:custom.additionalStacks.permanent.Resources.S3BundlesBucket.Properties.BucketName}/*
        S3BundlesBucket:
          Type: 'AWS::S3::Bucket'
          Properties:
            BucketName: ${opt:bundles-bucket, 'bundles'}
        WebsiteBucketPolicy:
          Type: 'AWS::S3::BucketPolicy'
          Properties:
            Bucket:
              Ref: "WebsiteBucket"
            PolicyDocument:
              Id: WebsiteBucketPolicy
              Statement:
                - Sid: AllowOnlyApplicationToGetObject
                  Effect: Allow
                  Principal:
                    AWS:
                    - ${self:provider.role}
                  Action: s3:GetObject
                  Resource:
                  - arn:aws:s3:::${self:custom.additionalStacks.permanent.Resources.WebsiteBucket.Properties.BucketName}/*
        WebsiteBucket:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${opt:website-bucket, 'website'}
  apigwBinary:
    types:
      - '*/*'
  output:
    file: ./serverless/stack.json
  tags:
    dev:
      environment: t
    prod:
      environment: p
  secret: ${file(./serverless/env.js)}
  sentry:
    dsn: https://${env:SENTRY_PUBLIC_KEY, self:custom.secret.SENTRY_PUBLIC_KEY}:${env:SENTRY_SECRET_KEY, self:custom.secret.SENTRY_SECRET_KEY}@sentry.io/${env:SENTRY_PROJECT_ID, self:custom.secret.SENTRY_PROJECT_ID}
    organization: ${env:SENTRY_ORGANISATION, self:custom.secret.SENTRY_ORGANISATION}
    project: ${env:SENTRY_PROJECT, self:custom.secret.SENTRY_PROJECT}
    authToken: ${env:SENTRY_AUTH_TOKEN, self:custom.secret.SENTRY_AUTH_TOKEN}
    release:
      version: ${opt:sentryVersion, 'git'}
      refs:
        - repository: ${opt:sentryRepository, 'financial-times/polyfill-service-serverless'}
          commit: ${opt:sentryCommit, self:custom.sentryDefaultCommit}
  sentryDefaultCommit: ${env:CIRCLE_SHA1, "default"}
  serverless-offline:
    dontPrintOutput: true
  s3Sync:
    - bucketName: ${self:custom.additionalStacks.permanent.Resources.WebsiteBucket.Properties.BucketName}
      bucketPrefix: v3/
      localDir: website/dist

package:
  exclude:
    - .nyc_output/**
    - .circleci/**
    - .serverless/**
    - .sonarlint/**
    - .terraform/**
    - .vscode/**
    - fastly/**
    - bower_components/**
    - coverage/**
    - node_modules/aws-sdk/**
    - node_modules/polyfill-library/polyfills/Intl/**
    - node_modules/polyfill-library/tasks/**
    - node_modules/polyfill-library/test/**
    - scripts/**
    - serverless/**
    - tasks/**
    - test/integration/**
    - test/unit/**
    - website/**
    - .editorconfig
    - .eslintrc.js
    - .gitignore
    - .prettierrc
    - bower.json
    - gulpfile.js
    - README.md
    - package-lock.json
    - package.json
    - secret-squirrel.js
    - terraform.tfstate
    - terraform.tfstate.backup

functions:
  v3polyfill:
    handler: functions/v3-polyfill.handler
    events:
      - http:
          method: get
          path:  /v3/polyfill.js
          contentHandling: CONVERT_TO_BINARY
      - http:
          method: get
          path:  /v3/polyfill.min.js
          contentHandling: CONVERT_TO_BINARY
  runner:
    handler: functions/test.tests
    events:
      - http:
          method: get
          path:  /test/test
      - http:
          method: get
          path:  /test/tests
  director:
    handler: functions/test.director
    events:
      - http:
          method: get
          path:  /test/director
  health:
    handler: functions/health.handler
    events:
      - http:
          method: get
          path: /v3/__health
      - http:
          method: get
          path: /v3/__gtg

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    V3polyfillLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:provider.stackName}-v3polyfill-${env:CIRCLE_SHA1, "default"}
    RunnerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:provider.stackName}-runner-${env:CIRCLE_SHA1, "default"}
    DirectorLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:provider.stackName}-director-${env:CIRCLE_SHA1, "default"}
    HealthLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:provider.stackName}-health-${env:CIRCLE_SHA1, "default"}
  # The "Outputs" that your AWS CloudFormation Stack should produce.  This allows references between services.
  Outputs:
    S3BundlesBucket:
      Description: The S3 Bucket used to store polyfill bundles
      Value: ${self:provider.environment.AWS_BUNDLE_BUCKET}
      Export:
        Name: AWS-BUNDLE-BUCKET-${self:provider.stackName}
    WebsiteBucket:
      Description: The S3 Bucket used to store polyfill bundles
      Value: ${self:provider.environment.AWS_WEBSITE_BUCKET}
      Export:
        Name: AWS-WEBSITE-BUCKET-${self:provider.stackName}
