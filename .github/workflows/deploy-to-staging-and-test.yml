name: Deploy to staging and test
on:
  push:
    branches: [ master ]
env:
  fastly_service_id: ${{ secrets.FASTLY_SERVICE_ID_STAGING }}
  domain: qa.polyfill.io
jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: git fetch --prune --unshallow
    - uses: actions/setup-node@v2.1.5
      with:
        node-version: 12.x
    - name: Cache node modules
      uses: actions/cache@v2.1.4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - run: npm ci
    - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.8
    - name: Turnstyle
      uses: softprops/turnstyle@v1
      with:
        same-branch-only: false
    - run: git push https://heroku:${{ secrets.HEROKU_AUTH_TOKEN }}@git.heroku.com/origami-polyfill-service-qa-eu.git HEAD:refs/heads/master --force
    - run: git push https://heroku:${{ secrets.HEROKU_AUTH_TOKEN }}@git.heroku.com/origami-polyfill-service-qa-us.git HEAD:refs/heads/master --force
    - name: Remove the development and production terraform configuration overrides
      run: rm -f terraform.tfstate fastly/terraform/dev_override.tf fastly/terraform/production_override.tf fastly/terraform/domains_override.tf
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: fastly/terraform/
    - name: 'Terraform Import Fastly Service'
      if: steps.witness.outputs.cache-hit != 'true'
      run: terraform import fastly_service_v1.app ${{ env.fastly_service_id }}
      working-directory: fastly/terraform/
      env:
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
    - name: 'Terraform Import Fastly Service Dictionary Items'
      if: steps.witness.outputs.cache-hit != 'true'
      run: terraform import fastly_service_dictionary_items_v1.items "${{ env.fastly_service_id }}/4dfSlimwvlJELO6htcnGsi"
      working-directory: fastly/terraform/
      env:
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
    - name: 'Terraform Validate'
      if: steps.witness.outputs.cache-hit != 'true'
      run: terraform validate
      working-directory: fastly/terraform/
    - name: 'Terraform Plan'
      if: steps.witness.outputs.cache-hit != 'true'
      run: terraform plan
      working-directory: fastly/terraform/
      env:
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
    - name: 'Terraform Apply'
      if: steps.witness.outputs.cache-hit != 'true'
      run: terraform apply --auto-approve
      working-directory: fastly/terraform/
      env:
        FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
    - run: sleep 60

  create-change-log:
    needs: [deploy-to-staging]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Financial-Times/change-api-action@v1
        name: Create new change log
        with:
          change-api-key: ${{ secrets.CHANGE_API_KEY }}
          system-code: "origami-polyfill-service"
          environment: test
          slack-channels: "ft-changes,origami-deploys"

  purge-cdn:
    needs: [deploy-to-staging]
    runs-on: ubuntu-latest
    steps:
      - run: "curl -X POST -H \"Fastly-Key: ${{ secrets.FASTLY_API_KEY_STAGING }}\" https://api.fastly.com/service/${{ env.fastly_service_id }}/purge_all"
      - run: sleep 60

  end-to-end-test:
    needs: [purge-cdn]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: 12.x
      - name: Cache node modules
        uses: actions/cache@v2.1.4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      - run: npm run test:integration
        env:
          HOST: "https://${{ env.domain }}"
