name: Deploy to dev and test
on: [pull_request]
env:
  fastly_service_id: ${{ secrets.FASTLY_SERVICE_ID_DEV }}
  domain: origami-polyfill-service-dev.in.ft.com
jobs:
  deploy-dev-and-purge-cdn:
    runs-on: ubuntu-latest
    steps:
      - name: env
        run: echo "commit-sha=$(echo ${GITHUB_SHA})" >> $GITHUB_ENV
      - run : echo "${{ env.commit-sha }}" > $GITHUB_WORKSPACE/witness-${{ env.commit-sha }}
      - name: record ${{ env.commit-sha }} witness
        id: witness
        uses: actions/cache@v2.1.4
        with:
          path: $GITHUB_WORKSPACE/witness-${{ env.commit-sha }}
          key: witness--${{ env.commit-sha }}
      - uses: actions/checkout@v2
        if: steps.witness.outputs.cache-hit != 'true'
      - run: git fetch --prune --unshallow
        if: steps.witness.outputs.cache-hit != 'true'
      - uses: actions/setup-node@v2.1.5
        if: steps.witness.outputs.cache-hit != 'true'
        with:
          node-version: 12.x
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.8
      - name: Cache node modules
        if: steps.witness.outputs.cache-hit != 'true'
        uses: actions/cache@v2.1.4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
        if: steps.witness.outputs.cache-hit != 'true'
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: fastly/terraform/

      - name: Remove the staging and production terraform configuration overrides
        if: steps.witness.outputs.cache-hit != 'true'
        run: rm -f terraform.tfstate fastly/terraform/qa_override.tf fastly/terraform/production_override.tf fastly/terraform/domains_override.tf
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: fastly/terraform/
      - name: 'Terraform Import Fastly Service'
        if: steps.witness.outputs.cache-hit != 'true'
        run: terraform import fastly_service_v1.app ${{ env.fastly_service_id }}
        working-directory: fastly/terraform/
        env:
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: 'Terraform Import Fastly Service Dictionary Items'
        if: steps.witness.outputs.cache-hit != 'true'
        run: terraform import fastly_service_dictionary_items_v1.items "${{ env.fastly_service_id }}/2RYpb2YAbYtpjSjwok0VWc"
        working-directory: fastly/terraform/
        env:
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: 'Terraform Validate'
        if: steps.witness.outputs.cache-hit != 'true'
        run: terraform validate
        working-directory: fastly/terraform/
      - name: 'Terraform Plan'
        if: steps.witness.outputs.cache-hit != 'true'
        run: terraform plan
        working-directory: fastly/terraform/
        env:
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: Turnstyle
        if: steps.witness.outputs.cache-hit != 'true'
        uses: softprops/turnstyle@v1
        with:
          same-branch-only: false
      - name: 'Terraform Apply'
        if: steps.witness.outputs.cache-hit != 'true'
        run: terraform apply --auto-approve
        working-directory: fastly/terraform/
        env:
          FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
      - name: Deploy to Heroku
        if: steps.witness.outputs.cache-hit != 'true'
        run: git push https://heroku:${{ secrets.HEROKU_AUTH_TOKEN }}@git.heroku.com/origami-polyfill-service-int.git HEAD:refs/heads/master --force
      - run: "curl -X POST -H \"Fastly-Key: ${{ secrets.FASTLY_API_KEY }}\" https://api.fastly.com/service/${{ env.fastly_service_id }}/purge_all"
        if: steps.witness.outputs.cache-hit != 'true'
      - run: sleep 60
        if: steps.witness.outputs.cache-hit != 'true'

  end-to-end-test:
    needs: [deploy-dev-and-purge-cdn]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: 12.x
      - name: Cache node modules
        uses: actions/cache@v2.1.4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      - run: npm run test:integration
        env:
          HOST: "https://${{ env.domain }}"
